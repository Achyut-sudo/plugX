


DESIGN CHOICE : TO IMPLEMENT RIGHT MARGIN FOR THE CONTENT

	CURRENTLY, INDENT ATTRIBUTE IMPLEMENTS THE LEFT MARGIN FOR THE CONTENT IN A CONTAINER TAG , WHICH IS EASY TO IMPLEMENT AS THE COLUM
        NUMBER OF ANY LINE STARTS FROM 0 FROM THE LEFT SO INDENT ATTROBUTE  HAS FIXED ANCHOR TODEFINE THE MIN COLUMN FOR ANY LINE ,
	BUT IN CASE OF RIGHT INDENT/MARGIN ,  DOES NOT HAVE SUCH FIXED ANCHOR FOR IT TO DEFINE THE COLUMN AS THE COLUMN IN THE RIGHT IS NOT
        FIXED

	SO THERE , ARE TWO CHOICES 


	1. DO NOT ADD SUPPORT FOR RIGHT INDENT/MARGIN 


	2. DEFINE A ATTRIBUTE NAMED MAX LINE COLUMN TO DEFFINE THE MAXIMUM LENGTH OF  ANY LINE 
		
		IN THIS WAY THE RIGHT INDENT/MARGIN CAN DEFINE THE  MAX COLUMN VALUE BASED ON THE  DEFINED VALUE 

		THIS ATTRIBUTE CAN BE  CONTANT IF DEFINED IN THE FILE , IF NOT THEN CALCULATED DYNAMICALLY 

		1. IN GLOBAL CONTAINER TAG , IF DEFINED THEN THAT VALUE IS DEFINED  THE WHOLE DOCUMENT , IF NOT THEN A METHOD IS DEFINED IN
	           THE PARSER  WHICH WILL DEFINE THE VALUE FOR THIS ATTRIBUTE BASE ON THE SYSTEM SCRREN SIZE ETC .  
		2. IF DEFINED IN CONTAINER TAG OTHER GLOBAL TAG, THEN OVERWRITES THE VALUE OF THE ATTRIBUTE FORO THE CURRENT TAG AND ITS 
		   CHILDS , BUT IF NOT DEFINED THE GLOBAL VALUE IS USED 


		VALID FOR GLOBAL , SECTION , TABLE AND CELL CONTAINER TAGS , IGNORED IN CASE OF ROW CONTAINER TAG 



	WHAT SHOULD BE THE NAMES OF THE  LEFT AND RIGHT ATTRIBUTES ?
	
		1. LEFT_INDENT/ RIGHT_INDENT
		2. MARGIN_LEFT/MARGIN_RIGHT 
		3. LEFT_MARGIN/RIGHT_MARGIN 
		3. INDENT/RIGHT_MARGIN 
		4. INDENT/RIGHT_INDENT  

SELECTED APPROACH : 2 and Name : 1. LEFT_MARGIN/RIGHT_MARGIN 

2. ATTRIBUTTE FOR RIGHT MARGIN ANCHORING :



	1. MAX_LINE_SIZE 
		THE MAX_COLUMN BECOMES  RELATIVE AS THE MAX_COLUMN FOR EACH LINE  NEEDS CALCULATION , BASED ON MAX_SIZE AND LEFT_MARGIN ,
		NUT IS MORE COMPRHENSIBLE IN TERM OF USAGE IN THE DOCUMENT.    


	2. MAX_LINE_COLUMN
		THE MAX_COLUMN IS EASIER IN TERMS OF IMPLEMNTATIONS , BUT IS DIFFICULT IN  TERMS OF USER UNDERSTANDING AS THE MAX_COLUMN
		MIGHT NOT BE APPARENT  AS MUCH AS MAX_SIZE IS 


SELECTED APPRAOCH : 2 

3. CONDITONAL RENDERING AND EVALUATION 

	1. DEFINE A ATTRIBUTE 'MODE' WHICH CONTROLS THE RENDERING OF THE VALUE 

		NOW THERE ARE TWO OPTIONS 
		
		1. MODE ATTRIBUTE IS A   BINARY  VALUE KEY 
			1. RENDER : RENDERS THE TAG 
			2. SKIP : SKIPS RENDERING THE TAG 

		2. RENDER ATTRIBUTE IS A MUTLTIPLE VALUE KEY 
			1. EVALUATE_ONLY : ONLY EVALUATE BUT DONT RENDER 
			2. EVALUATE_IF_REQUIRED : EVAULUATE IF REQUIRED EITHER  IN THE CURRENT DOCUMENT OR IN THE DOCUMENT WHERE ITS IS 
						  IMPORTED  
			3. RENDER  : EVAULATE AND THE RENDER 
			4. SKIP : NO EVALUATION NO RENDERING  

	2. NO SUCH ATTRIBUTE : I.E EVEERYTHING IS EVALUATED AND RENDERED 
		
SELECTED APPROACH : 1.2 


4. CONDITIONAL ERROR HANDLING/ERROR FALLBACK 

	
	IN ANY TAG THE SOURCES OF ERROR CAN BE 
		+-------------------+--------------------------------------------------------------------------------------+
		| TAG ATTRIBUTE     | EITHER IGNORE/WARN AND USE DEFAULT VALUE, PROPAGATE ERROR OR HANDLE THOURGH FALLBACK |
		+-------------------+--------------------------------------------------------------------------------------+
		| CONTENT OF THE TAG| SINCE THIS IS THE MINA CONTENT OF THE RENDERED TAG , THEN MUST BE HANDLED THORUGH THE|
		|                   | FALLBACK MECHANISM                                                                   |
		+-------------------+--------------------------------------------------------------------------------------+


	+----------+------------------+----------------------------------------------------------------------------------------------------+
	| TAG      | ERROR SOURCE     |                                                                                                    |
	+----------+------------------+----------------------------------------------------------------------------------------------------+
	| GLOBAL   | TAG ATTRIBUTE    | PROPAGATE AS ITS IS FALLBACK/DEFAULT VALUES FOR ATTRIBUTES FOR OTHER TAGS                          |
	|          | CONTENT          | NOT APPLICABLE                                                                                     |
	|          | CHILD TAG        | NOT APPLICABLE                                                                                     |
	| SECTION  | TAG ATTRIBUTE    | PROPAGATE IF THE ATTRIBUTE MANDATES IN CASE THE VALUE IS INVALID AND DEFAULT IS NOT DEFINED, IGNORE|
	|          |                  | /WARN IF THE ATTRIBUTE IS NOT MANDATORY IN CASE  THE VALUE IS INVALID AND DEFAULT IS NOT  FOUND    |
	|          | CONTENT          | SINCE THE ONLY SOURCE OF THE ERROR IN CONTENT IS THE PLUGS , THEN ERROR CAN BE HANDLE  THROUGH     |
	|          | CHILD TAG        | THE ERRORS IN CHILD TAG MUST BE HANDLED LOCALLY , SHOULD NOT BE PROPAGATED TO THE ANY HEIRARICHAL  |
	| TABLE    | TAG ATTRIBUTE    | PROPAGATE IF THE ATTRIBUTE MANDATES IN CASE THE VALUE IS INVALID AND DEFAULT IS NOT DEFINED, IGNORE|
	|          |                  | /WARN IF THE ATTRIBUTE IS NOT MANDATORY IN CASE  THE VALUE IS INVALID AND DEFAULT IS NOT  FOUND    |
	|          | CONTENT          | NOT APPLICABLE, AS THE TAGS ARE SINGLE TON EITHER THEY HAVE CHILD TAGS OR CONTENT                  |
	|          | CHILD TAG        | THE ERRORS IN CHILD TAG MUST BE HANDLED LOCALLY , SHOULD NOT BE PROPAGATED TO THE ANY HEIRARICHAL  |
	| ROW      | TAG ATTRIBUTE    | PROPAGATE IF THE ATTRIBUTE MANDATES IN CASE THE VALUE IS INVALID AND DEFAULT IS NOT DEFINED, IGNORE|
	|          |                  | /WARN IF THE ATTRIBUTE IS NOT MANDATORY IN CASE  THE VALUE IS INVALID AND DEFAULT IS NOT  FOUND    |
	|          | CONTENT          | SINCE ANY CONTENT INSIDE THE ROW TAG WILL BE AUTO-WRAPPED WITH CELL TAG, SO ERROR HANDLING WILL BE |
	|          |		      | HANDLED ACCORDING TO THE ERROR MECHANIMS OF CELL TAG                                               |
	|          | CHILD TAG        | THE ERRORS IN CHILD TAG MUST BE HANDLED LOCALLY , SHOULD NOT BE PROPAGATED TO THE ANY HEIRARICHAL  |
	| CELL     | TAG ATTRIBUTE    | PROPAGATE IF THE ATTRIBUTE MANDATES IN CASE THE VALUE IS INVALID AND DEFAULT IS NOT DEFINED, IGNORE|
	|          |                  | /WARN IF THE ATTRIBUTE IS NOT MANDATORY IN CASE  THE VALUE IS INVALID AND DEFAULT IS NOT  FOUND    |
	|          | CONTENT          | SINCE THE ONLY SOURCE OF THE ERROR IN CONTENT IS THE PLUGS , THEN ERROR CAN BE HANDLE  THROUGH     |
	|          | CHILD TAG        | THE ERRORS IN CHILD TAG MUST BE HANDLED LOCALLY , SHOULD NOT BE PROPAGATED TO THE ANY HEIRARICHAL  |
	+----------+------------------+----------------------------------------------------------------------------------------------------+

	AS PER ABOVE TABLE THE  PLUGS ARE REQUIRED FALLBACK MECHANISM AS OTHER ERRORS WILL EITHER PROPAGATED OR IGNORE/WARN 	

	
	

ERROR FALLBACK MECHANISM :

	1. BY DEFINING  ATTRIBUTTE ON_ERROR@ERROR_TYPE 
		HANDLES ALL ERROR OF SPECIFIC TYPE IF ERROR_TYPE IS NOT DEFINED THEN IS PPLIED TO ALL ERROR 
	
		VALUES OF THE ATTRIBUTE CAN BE LIKE :

			PROPAGATE@MESSAGE : PROPAGATES THE ERROR 
			IGNORE@DEFAULT_VALUE : IGNORES THE ERROR AND IN PLACE OF THE PLUG PLACES THE DEFAULT_VALUE 
			WARN@DEFAULT_VALUE : IGNORES THE ERROR AND IN PLACE OF THE PLUG PLACES THE DEFAULT_VALUE 		
			RETRY@LIMIT : RETRIES TO EVALUATION OF THE PLUGS BEFORE  EXECUTING THE SCOPE PLUGS AGAIN 
					RETRY STANDARD OPTION MUST BE CLUBBED WITH ONE OTHER STANDARD OPTION  

		IN THIS ATTRIBUTE THE  ERROR FALLBACK IS GENERAL I.E HANDLING IS APPLIED TO ALL PLUGS WITHIN THE SCOPE 
	
	FOR SPECIFIC ERROR FALLBACK HANDLING , A DEDICATED  SECTION TAG WITH MODE TO EVALUATE_ONLY CAN BE CREATED WITH SINGLE PLUG AND THEN 
	CAN BE REFERENCED ANYWHERE IN THE DOCUMENT USING PLUGS 




PRE AND POST CONTENT MODIFIER 

	1 DEFINE TWO DIFFERNT ATTRIBUTES 
		CONTENT_MODIFIER_PRE : PRE EVAUALTION MODIFIER 
		CONTENT_MODIFIER_POST : POST EVALUATION MODIFIER 
	2  DEFINE ONE BUTT USE PRE AND POST @ OPERATOR 
		CONTENT_MODIFIER@PRE 
		CONTENT_MODIFIER@POST 

		CURRENTLY  THERE ARE TWO TYPE OF MODIFIER TITLE_MODIFIER AND CONTENT_MODIFIER 
			sshould i use MODIFIER@CONTENT@PRE OR MODIFIER@TITLE@POST 


SELECTED  :  2 but separate attributes fro title and content ie title_modifier@stage and content_modifier@stage 



REUSABLE DYNAMIC TEMPLATES  :

	RIGHT NOW IF IN THE DOCUMENT , CONTENT OR TABLE WITH SAME STRUCTURE IS USED WITH MODIFICATION IN SOME  PLACES, THEN THEERE IS NO WAY
	TO DEFINE A REUSABLE TAG WHICH THEN CAN BE USED IN MUTLIPLE PLACES WITH CHANGED DATA , 
	
	CURRENTLY , REUSABLE STRUCTURES CAN BE DEFINED EXTERNALY AND REFFERNCED BUT  SINCE THE EVLUATION IS DONE IS DONE ONLY ONCE AT THE TA
	TAG WHERE THE STRUCTURE IS DEFINED, HENCE DYNAMIC CONTENT MODIFICATION IS NOT POSSIBLE PER REQUIREMENT AS AFTER EVALUATION THE
	EXTERNAL TAG WILL CONTAIN A STATIC CONTENT , HENCE CANNOT BE USED FOR OTHERTAGS WITH SAME STRUCTURE AND DIFFERENT CONTENT 

	

	SOLUTION FOR IT IS TO  :



	1. DEFFINE A TEMPLATE TAG WHICH IS SECTION OR TABLE TAG WITH MODE EVALUATE_IF_REQUIRED AND THE  CONTENT IS EVALUATED BASED ON THE ATTRIBUTES OF THE SCOPE WHERE IT  IS REFFERED 

		PROS :
			EASY TO IMPLEMENT 
		CONS :
			EXTRA TAG
			

	2. SINCE THIS WILL DEFINED IN  A  CONTAINER TAG , DEFINE PRE/POST STAGE IN THE TAG ACCESSION SCOPES 
		
		  SOME_TAG_ACCESSION@PRE : IN THIS CASE THE CONTNET  FROM REFFERED CONTAIINER IS INSERTED  IN THE REFERIG CONTIANER  IN RAW 
					   RAW FORM , I.E. ALL THE EVALUATION IS DONE THE BASIS OF THE CURRENT SCOPE , SO  THE EXTRA 
					   CONTNET SPECIFIC ATTRIBUTE THET WAS MENTIONED INT THE REFERED CONTAINER MUST BE ALSO BE PRESENT 
					   IN THE CURRENT SCOPE.  THE  WHEN THE EVALUATION IS DONE ON THE BASIS OF THE CURRENT SCOPE THEN 
					   THE  REFFERRD  CONTENT IS ALSO EVALUATED,  IT JUST LIKE THE CONTNET OF THE REFERED CONTIANER IS 
					   JUST COPIED IN THIS 
			

		 SOME_TAG_ACCESSION@POST : NORMAL ACCESION ,  THE CONTENT IS INSERTED AFTER EVALUATION IN THE REFERED SCOPE 



		

SELECTED CHOICE : 2 DEFINE STAGES IN TAG ACCESSION 

	





MARGIN DESIGN :

	
	SINCE THE NESTED SECTION TAGS ARE RENDERED TOP TO BOTTOM SO NO REQUIREMENT OF LEFT_MARGIN/RIGHT_MARGIN 


	THERE ARE TWO  DESIGN CHOICES FOR DEFINEING MARGIN ATTRIBUTE  :

		1. DEFINE  EACH ATTRIBUTE SEPARATELEY :
			MARGIN_TOP : TOP MARGIN  TO LEAVE BEFORE STARTING THE RENDERING OF CHILD TAGS  .CONTENT 
			MARGIN_IN_BETWEEN : MARGIN BETWEEN THE CHILD CONTAINER TAGS 
			MARGIN_BOTTOM : BOTTOM MARGIN TO LEAVE  AFTER ALL THE CHILD TAGS / CONTENT HAS BEEN RENDERED 
			

		2. DEFIEN A SINGLE MUTLIVALUED ATTRIBUTE WITH KEYWORDED ARGUMENTS :
			
			<MARGIN : (DEFAULT_VALUE,TOP=SOME_TOP_MARGIN, BOTTOM =SOME_TOP_MARGIN , IN_BETWEEN=SOME_IN_BETWEEN_MARGIN)>
			          DEFAULT_VALUE IS USED IF ANY OR ALL  KEYWORDS IN MISSING IF ALL ARE PRESENT THEN THE EFINED VALUE IS USED
				  THE VLAUE FOR THE KEYWORD THAT IS MISSIGN WILL BESET WITH THE DEFAULT_VALUE 


 

SELECTED : 2 SINGLE MULTIVALUED KEYWORDED ARG ATTRIBUTE MARGINS
        



PADDING ATTRIBUTE  :

	

	GO SIMILAR WITH MARGIN ATTRIBUTE DESIGN 


	<PADDING : (DEFAULT_VALUE , TOP = SOME_TOP_PADDING,BOTTOM=  SOME_BOTTOM_PADDING,LEFT = SOME_LEFT_PADDING, RIGHT=SOME_RIGHT_PADDING)


 

BORDER ATTRIBUTE :


	IS IT REWUIRED TO DEFINE A DEDICATED BORDER ATTRIBUTE 'BORDER' OR IT CAN BE DONE THROUGH STANDARD OPTION FOR CONTENT_MODEIFIER@PPOST
















	

                                                                                                                     
                                                                                                                     


